// Code generated by cmd/opcode_scraper/main.go; DO NOT EDIT.
package cpu

import "errors"

type opcode func(mode addressingMode)

type instruction struct {
	opcode string
	bytes  uint16
	cycles uint16
	mode   addressingMode
}

func (i instruction) Call(cpu *CPU) error {
	var err error

	switch i.opcode {
	{{ range . }}case "{{ .Name }}":
		err = cpu.{{ .Name }}(i.mode)
	{{ end }}default:
		return errors.New("unexpected opcode")
	}

	cpu.programCounter += i.bytes - 1

	return err
}

func newInstruction(opcode string, bytes uint16, cycles uint16, mode addressingMode) instruction {
	return instruction{
	  opcode: opcode,
		bytes:	bytes,
		cycles:	cycles,
		mode:		mode,
	}
}

func NewInstructions() map[uint8]instruction {
	return map[uint8]instruction{
	{{ range $OpCode := . }}// {{ $OpCode.Name }}
		{{ range .Modes}}0x{{ .Code }}: newInstruction("{{ $OpCode.Name }}", {{ .Bytes }}, {{ .Cycles }}, {{ .Name }}Mode),
	{{ end }}{{ end }}
	}
}
